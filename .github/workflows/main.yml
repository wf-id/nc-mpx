name: Update with Latest Data

on:
#  push:
#      paths:
#        - DESCRIPTION
  schedule:
    - cron:  '30 16 * * 4'

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11"]
      fail-fast: false
    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      RENV_PATHS_ROOT: ~/.local/share/renv
      LANG: "en_US.UTF-8"
      LC_ALL: "en_US.UTF-8"
      USE_BSPM: "true"
      _R_CHECK_FORCE_SUGGESTS_: "false"
      
    steps:
      - uses: actions/checkout@v4
      - uses: r-lib/actions/setup-r@v2
        id: install-r
        with:
          r-version: 4.1.3
      - uses: quarto-dev/quarto-actions/setup@v2
      - uses: quarto-dev/quarto-actions/install-quarto@v1
      - name: Install system dependencies
        if: runner.os == 'Linux'
        env:
          RHUB_PLATFORM: linux-x86_64-ubuntu-gcc
          GITHUB_PAT: ${{secrets.PAT}}
      - name: Bootstrap
        run: |
            chmod 0755 run.sh
            ./run.sh bootstrap
      - name: Install system dependencies
        if: runner.os == 'Linux'
        env:
          RHUB_PLATFORM: linux-x86_64-ubuntu-gcc
          GITHUB_PAT: ${{secrets.PAT}}
        run: |
          ./run.sh install_all
      - name: Run script
        env:
          ACCESS_SECRET: ${{ secrets.ACCESS_SECRET }}
          ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
          CONSUMER_KEY: ${{ secrets.CONSUMER_KEY }}
          CONSUMER_SECRET: ${{ secrets.CONSUMER_SECRET }}
        run: |-
          Rscript -e "source('scrape.R')"
      - run: |
          quarto --version
      - name: quarto
        run: |-
          quarto render
      - name: Commit results
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git commit -m "Update the latest data" -a || echo "No changes to commit"
          git push https://${{github.actor}}:${{secrets.GITHUB_TOKEN}}@github.com/${{github.repository}}.git HEAD:${{ github.ref }} || echo "No changes to commit"
      - id: release
        run: |
          patch_version=${{ github.event.inputs.patch_version }}
          [ ! -z $patch_version ] && patch_version="."$patch_version
          # if so, append to usual montly number
          current_tag="$(date '+%Y.%m.%d')${patch_version}"
          daily_release="v${current_tag}"
          
          git tag -f $daily_release
          git push
          git push -f --tags
      - name: Check Output Parameters
        run: |
          echo "Got tag name ${{ steps.release.outputs.tag_name }}"
          echo "Got release version ${{ steps.release.outputs.version }}"
      - name: Create a Release
        uses: elgohr/Github-Release-Action@v4
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        with:
          title: "MpoxInNorthCarolina"
